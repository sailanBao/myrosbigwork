// Generated by gencpp from file bigwork/hand_msg.msg
// DO NOT EDIT!


#ifndef BIGWORK_MESSAGE_HAND_MSG_H
#define BIGWORK_MESSAGE_HAND_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bigwork
{
template <class ContainerAllocator>
struct hand_msg_
{
  typedef hand_msg_<ContainerAllocator> Type;

  hand_msg_()
    : x(0)
    , y(0)
    , fingertips_x()
    , fingertips_y()  {
    }
  hand_msg_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , fingertips_x(_alloc)
    , fingertips_y(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _fingertips_x_type;
  _fingertips_x_type fingertips_x;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _fingertips_y_type;
  _fingertips_y_type fingertips_y;





  typedef boost::shared_ptr< ::bigwork::hand_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bigwork::hand_msg_<ContainerAllocator> const> ConstPtr;

}; // struct hand_msg_

typedef ::bigwork::hand_msg_<std::allocator<void> > hand_msg;

typedef boost::shared_ptr< ::bigwork::hand_msg > hand_msgPtr;
typedef boost::shared_ptr< ::bigwork::hand_msg const> hand_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bigwork::hand_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bigwork::hand_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bigwork::hand_msg_<ContainerAllocator1> & lhs, const ::bigwork::hand_msg_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.fingertips_x == rhs.fingertips_x &&
    lhs.fingertips_y == rhs.fingertips_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bigwork::hand_msg_<ContainerAllocator1> & lhs, const ::bigwork::hand_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bigwork

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bigwork::hand_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bigwork::hand_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bigwork::hand_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bigwork::hand_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bigwork::hand_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bigwork::hand_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bigwork::hand_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "380b203d8077022bcbc89696459febd1";
  }

  static const char* value(const ::bigwork::hand_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x380b203d8077022bULL;
  static const uint64_t static_value2 = 0xcbc89696459febd1ULL;
};

template<class ContainerAllocator>
struct DataType< ::bigwork::hand_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bigwork/hand_msg";
  }

  static const char* value(const ::bigwork::hand_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bigwork::hand_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 x\n"
"int32 y\n"
"int32[] fingertips_x\n"
"int32[] fingertips_y\n"
;
  }

  static const char* value(const ::bigwork::hand_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bigwork::hand_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.fingertips_x);
      stream.next(m.fingertips_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hand_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bigwork::hand_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bigwork::hand_msg_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "fingertips_x[]" << std::endl;
    for (size_t i = 0; i < v.fingertips_x.size(); ++i)
    {
      s << indent << "  fingertips_x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.fingertips_x[i]);
    }
    s << indent << "fingertips_y[]" << std::endl;
    for (size_t i = 0; i < v.fingertips_y.size(); ++i)
    {
      s << indent << "  fingertips_y[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.fingertips_y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIGWORK_MESSAGE_HAND_MSG_H
